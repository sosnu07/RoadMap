1
00:00:00,580 --> 00:00:07,040
[Music]

2
00:00:07,040 --> 00:00:08,880
this video is sponsored by dev mountain

3
00:00:08,880 --> 00:00:10,240
if you're interested in learning web

4
00:00:10,240 --> 00:00:10,880
development

5
00:00:10,880 --> 00:00:13,759
ios or ux design devmountain is a

6
00:00:13,759 --> 00:00:15,839
12-week design and development bootcamp

7
00:00:15,839 --> 00:00:17,840
intended to get you a full-time position

8
00:00:17,840 --> 00:00:18,800
in the industry

9
00:00:18,800 --> 00:00:20,960
to learn more visit devmountain.com or

10
00:00:20,960 --> 00:00:22,800
click the link in the description below

11
00:00:22,800 --> 00:00:24,240
hey what's going on guys so in this

12
00:00:24,240 --> 00:00:25,760
video i want to talk about something

13
00:00:25,760 --> 00:00:27,680
that i think isn't talked about often

14
00:00:27,680 --> 00:00:30,320
enough and that's the http protocol

15
00:00:30,320 --> 00:00:32,238
that we as web developers work with

16
00:00:32,238 --> 00:00:33,680
every day and

17
00:00:33,680 --> 00:00:35,520
whether you're a backend full stack or

18
00:00:35,520 --> 00:00:37,200
even front-end developer it's important

19
00:00:37,200 --> 00:00:39,040
to understand http

20
00:00:39,040 --> 00:00:41,440
and the whole request response cycle so

21
00:00:41,440 --> 00:00:42,879
in this video we're going to touch on

22
00:00:42,879 --> 00:00:44,399
how all this works we'll look at the

23
00:00:44,399 --> 00:00:46,239
different types of responses

24
00:00:46,239 --> 00:00:48,960
methods status codes and you know what

25
00:00:48,960 --> 00:00:50,559
you get back from a server

26
00:00:50,559 --> 00:00:52,160
when you send a request and we're going

27
00:00:52,160 --> 00:00:53,840
to go through some slides

28
00:00:53,840 --> 00:00:56,399
and i'd like to test some of this stuff

29
00:00:56,399 --> 00:00:58,719
out with node.js and express

30
00:00:58,719 --> 00:01:01,199
along with postman which is an http

31
00:01:01,199 --> 00:01:01,920
client

32
00:01:01,920 --> 00:01:04,159
and i think express is a great framework

33
00:01:04,159 --> 00:01:05,438
to kind of give you

34
00:01:05,438 --> 00:01:07,840
some examples of how http works because

35
00:01:07,840 --> 00:01:09,680
we handle everything ourselves it's very

36
00:01:09,680 --> 00:01:10,799
minimalistic

37
00:01:10,799 --> 00:01:12,880
we handle the request the response

38
00:01:12,880 --> 00:01:14,479
directly rather than

39
00:01:14,479 --> 00:01:16,479
having it be abstracted like it is in

40
00:01:16,479 --> 00:01:18,240
many higher level frameworks

41
00:01:18,240 --> 00:01:19,680
so even if you're not familiar with

42
00:01:19,680 --> 00:01:21,600
express or node that's fine we're not

43
00:01:21,600 --> 00:01:23,600
focusing on the specific framework or

44
00:01:23,600 --> 00:01:24,880
language

45
00:01:24,880 --> 00:01:27,680
so let's first talk about what http is

46
00:01:27,680 --> 00:01:28,640
it stands for

47
00:01:28,640 --> 00:01:31,759
hypertext transfer protocol and it's

48
00:01:31,759 --> 00:01:34,000
basically responsible for communication

49
00:01:34,000 --> 00:01:36,159
between web servers and clients it's the

50
00:01:36,159 --> 00:01:37,520
protocol of the web

51
00:01:37,520 --> 00:01:39,600
so every time you open up your browser

52
00:01:39,600 --> 00:01:41,680
and you visit a web page or you submit a

53
00:01:41,680 --> 00:01:42,159
form

54
00:01:42,159 --> 00:01:44,000
or you click a button that sends some

55
00:01:44,000 --> 00:01:46,880
kind of ajax request or fetch request

56
00:01:46,880 --> 00:01:48,159
something like that

57
00:01:48,159 --> 00:01:51,360
you're you're using http and you're

58
00:01:51,360 --> 00:01:52,880
going through what's called the request

59
00:01:52,880 --> 00:01:54,799
and response cycle you make a request

60
00:01:54,799 --> 00:01:56,399
and you get a response back

61
00:01:56,399 --> 00:01:58,240
that has something called headers and

62
00:01:58,240 --> 00:01:59,520
something called the body

63
00:01:59,520 --> 00:02:00,799
and we're going to look more into that

64
00:02:00,799 --> 00:02:03,280
cycle in a bit all right so it's

65
00:02:03,280 --> 00:02:05,439
important to understand that http is

66
00:02:05,439 --> 00:02:07,520
stateless meaning that every request is

67
00:02:07,520 --> 00:02:08,800
completely independent

68
00:02:08,800 --> 00:02:10,639
okay when you make one request visiting

69
00:02:10,639 --> 00:02:12,959
a web page or you go to another page

70
00:02:12,959 --> 00:02:14,800
after that or reload the page

71
00:02:14,800 --> 00:02:17,040
it doesn't remember anything about the

72
00:02:17,040 --> 00:02:18,400
previous

73
00:02:18,400 --> 00:02:20,239
basically transaction you can kind of

74
00:02:20,239 --> 00:02:22,480
look at each request as a single

75
00:02:22,480 --> 00:02:24,000
transaction

76
00:02:24,000 --> 00:02:25,920
now there's other things we can utilize

77
00:02:25,920 --> 00:02:28,480
to for instance hold login data

78
00:02:28,480 --> 00:02:31,200
and make a more enhanced user experience

79
00:02:31,200 --> 00:02:31,840
things like

80
00:02:31,840 --> 00:02:34,480
programming local storage cookies

81
00:02:34,480 --> 00:02:36,000
sessions stuff like that

82
00:02:36,000 --> 00:02:38,400
but just know that http at its core is

83
00:02:38,400 --> 00:02:41,040
completely stateless

84
00:02:41,040 --> 00:02:43,840
so what is https and i'm sure that a lot

85
00:02:43,840 --> 00:02:45,680
of you guys know this stuff but just for

86
00:02:45,680 --> 00:02:48,640
people that don't https stands for

87
00:02:48,640 --> 00:02:51,440
hypertext transfer protocol secure

88
00:02:51,440 --> 00:02:54,000
and it's basically where all the data

89
00:02:54,000 --> 00:02:54,800
that's sent

90
00:02:54,800 --> 00:02:57,040
back and forth is encrypted by something

91
00:02:57,040 --> 00:02:59,360
called ssl which stands for secure

92
00:02:59,360 --> 00:03:02,000
sockets layer or by tls which is the

93
00:03:02,000 --> 00:03:04,720
transport security layer so anytime you

94
00:03:04,720 --> 00:03:06,800
have users that are sending sensitive

95
00:03:06,800 --> 00:03:08,159
information

96
00:03:08,159 --> 00:03:09,360
you should always it should always be

97
00:03:09,360 --> 00:03:12,000
over https especially if it's like

98
00:03:12,000 --> 00:03:14,159
credit card data social security numbers

99
00:03:14,159 --> 00:03:15,519
you want to have a high level of

100
00:03:15,519 --> 00:03:17,120
security for that stuff

101
00:03:17,120 --> 00:03:19,200
and even things like contact forms you

102
00:03:19,200 --> 00:03:21,440
should have https

103
00:03:21,440 --> 00:03:23,519
a lot of websites and applications now

104
00:03:23,519 --> 00:03:25,519
are just forcing https

105
00:03:25,519 --> 00:03:28,239
on every page which isn't a bad idea and

106
00:03:28,239 --> 00:03:30,560
you can do this by installing

107
00:03:30,560 --> 00:03:33,200
an ssl certificate on your web host and

108
00:03:33,200 --> 00:03:33,599
there's

109
00:03:33,599 --> 00:03:35,360
there's different levels of security

110
00:03:35,360 --> 00:03:38,239
different levels of certificates as well

111
00:03:38,239 --> 00:03:40,159
all right so when a request is made to a

112
00:03:40,159 --> 00:03:42,560
server it has some kind of method

113
00:03:42,560 --> 00:03:43,519
attached to it

114
00:03:43,519 --> 00:03:45,360
and there's there's more than this these

115
00:03:45,360 --> 00:03:46,720
are the main four that you're going to

116
00:03:46,720 --> 00:03:48,000
be working with

117
00:03:48,000 --> 00:03:49,360
um and these are the ones i'm going to

118
00:03:49,360 --> 00:03:50,959
go over but just know there are there

119
00:03:50,959 --> 00:03:52,319
are a couple more

120
00:03:52,319 --> 00:03:54,959
so a get request is used when you want

121
00:03:54,959 --> 00:03:56,720
to get or fetch data from its

122
00:03:56,720 --> 00:03:58,720
from the server this could be just

123
00:03:58,720 --> 00:04:01,360
loading a standard html page

124
00:04:01,360 --> 00:04:04,319
loading assets like css or images json

125
00:04:04,319 --> 00:04:05,840
data xml data

126
00:04:05,840 --> 00:04:08,560
and so on so every time you visit a web

127
00:04:08,560 --> 00:04:10,400
page you're making a get request to the

128
00:04:10,400 --> 00:04:12,480
server via http

129
00:04:12,480 --> 00:04:14,720
now a post request is usually used when

130
00:04:14,720 --> 00:04:16,478
you're posting data when you're adding

131
00:04:16,478 --> 00:04:18,079
something to the server adding a

132
00:04:18,079 --> 00:04:18,959
resource

133
00:04:18,959 --> 00:04:21,120
typically when you submit a form like

134
00:04:21,120 --> 00:04:22,639
let's say a contact form

135
00:04:22,639 --> 00:04:25,120
you'll be making a post request if

136
00:04:25,120 --> 00:04:26,000
you're submitting

137
00:04:26,000 --> 00:04:27,840
uh maybe a blog post you're creating a

138
00:04:27,840 --> 00:04:29,520
new blog post that's going to be a post

139
00:04:29,520 --> 00:04:30,240
request

140
00:04:30,240 --> 00:04:31,919
you're sending data to the server and

141
00:04:31,919 --> 00:04:33,759
typically that data will be stored in a

142
00:04:33,759 --> 00:04:35,600
database somewhere

143
00:04:35,600 --> 00:04:37,280
you can also have forms that make get

144
00:04:37,280 --> 00:04:40,080
requests but it's less secure because

145
00:04:40,080 --> 00:04:41,759
the stuff that you send in the form is

146
00:04:41,759 --> 00:04:44,160
actually going to be visible in the url

147
00:04:44,160 --> 00:04:46,560
so typically you don't want to use a get

148
00:04:46,560 --> 00:04:48,479
request with a form unless it's some

149
00:04:48,479 --> 00:04:50,000
kind of search form where all you're

150
00:04:50,000 --> 00:04:51,680
doing is filtering data

151
00:04:51,680 --> 00:04:53,199
that's coming back from the server

152
00:04:53,199 --> 00:04:55,520
you're not actually posting anything

153
00:04:55,520 --> 00:04:57,680
all right and then we have a put request

154
00:04:57,680 --> 00:04:59,520
which is used to update data that's

155
00:04:59,520 --> 00:05:01,120
already on the server so if you have a

156
00:05:01,120 --> 00:05:02,880
blog post you want to edit it

157
00:05:02,880 --> 00:05:04,880
maybe change the image or change some

158
00:05:04,880 --> 00:05:06,800
text typically you would do that with a

159
00:05:06,800 --> 00:05:07,840
put request

160
00:05:07,840 --> 00:05:09,680
and then a delete request of course just

161
00:05:09,680 --> 00:05:11,600
deletes data from the server

162
00:05:11,600 --> 00:05:14,080
all right so with each request and

163
00:05:14,080 --> 00:05:15,120
response

164
00:05:15,120 --> 00:05:17,039
using http you have something called a

165
00:05:17,039 --> 00:05:18,320
header you have something called the

166
00:05:18,320 --> 00:05:19,199
body

167
00:05:19,199 --> 00:05:22,880
so the body typically with a response is

168
00:05:22,880 --> 00:05:23,360
going to be

169
00:05:23,360 --> 00:05:25,440
the html page that you're you're trying

170
00:05:25,440 --> 00:05:27,919
to load the the json data whatever is

171
00:05:27,919 --> 00:05:29,520
being sent from the server

172
00:05:29,520 --> 00:05:31,759
and then when you make a request you can

173
00:05:31,759 --> 00:05:33,600
also send a request body

174
00:05:33,600 --> 00:05:35,600
for instance when you submit a form the

175
00:05:35,600 --> 00:05:37,360
form fields you're submitting

176
00:05:37,360 --> 00:05:39,919
are part of the request body all right

177
00:05:39,919 --> 00:05:41,440
now when it comes to the header

178
00:05:41,440 --> 00:05:43,199
you also have request headers and

179
00:05:43,199 --> 00:05:45,280
response headers in in something called

180
00:05:45,280 --> 00:05:46,320
a general header

181
00:05:46,320 --> 00:05:48,960
okay so it's basically divided into

182
00:05:48,960 --> 00:05:50,639
three parts and there's different fields

183
00:05:50,639 --> 00:05:52,240
on each part so

184
00:05:52,240 --> 00:05:53,759
typically a header will look something

185
00:05:53,759 --> 00:05:55,680
like this you'll make a

186
00:05:55,680 --> 00:05:58,639
method like a get request to a path or

187
00:05:58,639 --> 00:05:59,360
url

188
00:05:59,360 --> 00:06:02,880
with a protocol in this case http 1.1

189
00:06:02,880 --> 00:06:04,240
and then you'll have all these different

190
00:06:04,240 --> 00:06:06,639
header fields and a lot of these

191
00:06:06,639 --> 00:06:08,479
you're not really going to need to care

192
00:06:08,479 --> 00:06:10,319
about but it's good to know

193
00:06:10,319 --> 00:06:12,560
what some of the more common ones do and

194
00:06:12,560 --> 00:06:13,759
what they are especially

195
00:06:13,759 --> 00:06:16,639
with the general uh part of it so in

196
00:06:16,639 --> 00:06:18,639
general we have the request url which is

197
00:06:18,639 --> 00:06:20,400
pretty straightforward it's just the url

198
00:06:20,400 --> 00:06:21,520
you're requesting

199
00:06:21,520 --> 00:06:23,440
the request method so if it's a get

200
00:06:23,440 --> 00:06:25,840
request post request and so on

201
00:06:25,840 --> 00:06:27,680
the status code this is probably the

202
00:06:27,680 --> 00:06:29,440
most important and i'm going to go over

203
00:06:29,440 --> 00:06:31,840
status codes in the next slide

204
00:06:31,840 --> 00:06:34,160
the remote address which is the ip of

205
00:06:34,160 --> 00:06:35,600
the remote computer

206
00:06:35,600 --> 00:06:38,000
the refer policy so if you're if you go

207
00:06:38,000 --> 00:06:39,840
to a page from another page it might

208
00:06:39,840 --> 00:06:41,840
have some information on that

209
00:06:41,840 --> 00:06:44,240
uh and whatever the poll referrer policy

210
00:06:44,240 --> 00:06:46,720
is i'm not that familiar with it

211
00:06:46,720 --> 00:06:49,120
um the response header fields you have

212
00:06:49,120 --> 00:06:49,840
server

213
00:06:49,840 --> 00:06:53,440
so if it's apache or nginx or something

214
00:06:53,440 --> 00:06:54,720
like that

215
00:06:54,720 --> 00:06:56,319
and a lot of times this will be hidden

216
00:06:56,319 --> 00:06:58,000
just to prevent hackers from knowing

217
00:06:58,000 --> 00:07:01,120
what type of server the the website uses

218
00:07:01,120 --> 00:07:04,319
so set cookie is used for servers to

219
00:07:04,319 --> 00:07:07,360
send small pieces of data called cookies

220
00:07:07,360 --> 00:07:10,560
from the server to the client and then

221
00:07:10,560 --> 00:07:13,039
content type so every response has a

222
00:07:13,039 --> 00:07:13,919
content type

223
00:07:13,919 --> 00:07:16,560
for instance if it's an html page it'll

224
00:07:16,560 --> 00:07:16,960
have

225
00:07:16,960 --> 00:07:20,240
a content type of text html

226
00:07:20,240 --> 00:07:23,440
css files would be text css

227
00:07:23,440 --> 00:07:25,840
images you have image slash png image

228
00:07:25,840 --> 00:07:27,120
slash jpeg

229
00:07:27,120 --> 00:07:29,520
if it's json data it'll be application

230
00:07:29,520 --> 00:07:30,800
slash json

231
00:07:30,800 --> 00:07:32,479
this is something that i think is really

232
00:07:32,479 --> 00:07:33,919
important to know with the different

233
00:07:33,919 --> 00:07:35,680
content types

234
00:07:35,680 --> 00:07:37,120
and then you also have the content

235
00:07:37,120 --> 00:07:38,720
length which is just that it's the

236
00:07:38,720 --> 00:07:39,199
length

237
00:07:39,199 --> 00:07:42,560
it's in octets which are i believe 8-bit

238
00:07:42,560 --> 00:07:43,520
bytes

239
00:07:43,520 --> 00:07:45,360
and then also the date okay and there's

240
00:07:45,360 --> 00:07:46,560
other fields as well but

241
00:07:46,560 --> 00:07:48,560
i'm not going to list every single one

242
00:07:48,560 --> 00:07:50,560
or every possible one

243
00:07:50,560 --> 00:07:52,720
so some common request fields are

244
00:07:52,720 --> 00:07:54,319
cookies now

245
00:07:54,319 --> 00:07:56,319
if you have a cookie that was previously

246
00:07:56,319 --> 00:07:58,479
sent by the server and you need to send

247
00:07:58,479 --> 00:07:58,800
it

248
00:07:58,800 --> 00:08:00,400
back to the server you would do it in

249
00:08:00,400 --> 00:08:01,840
this field

250
00:08:01,840 --> 00:08:03,759
you also have a bunch of accept fields

251
00:08:03,759 --> 00:08:05,199
like accepting coding

252
00:08:05,199 --> 00:08:08,960
except character set except language

253
00:08:08,960 --> 00:08:11,440
these are just the different encodings

254
00:08:11,440 --> 00:08:13,759
and languages and stuff that

255
00:08:13,759 --> 00:08:16,800
um uh the client is able to understand

256
00:08:16,800 --> 00:08:19,840
okay content type again so if you're

257
00:08:19,840 --> 00:08:20,960
sending data

258
00:08:20,960 --> 00:08:22,720
like let's say you're sending json you'd

259
00:08:22,720 --> 00:08:24,720
want to set this to application

260
00:08:24,720 --> 00:08:26,800
slash json and then you also have

261
00:08:26,800 --> 00:08:27,759
content length

262
00:08:27,759 --> 00:08:31,440
as well so authorization um

263
00:08:31,440 --> 00:08:33,919
remember http is stateless so you might

264
00:08:33,919 --> 00:08:36,000
need to send some type of token

265
00:08:36,000 --> 00:08:38,000
within the header the authorization and

266
00:08:38,000 --> 00:08:40,479
the header so that you can for instance

267
00:08:40,479 --> 00:08:42,080
validate a user to

268
00:08:42,080 --> 00:08:44,560
access a protected route or a protected

269
00:08:44,560 --> 00:08:45,920
page

270
00:08:45,920 --> 00:08:47,200
unless you're using something like

271
00:08:47,200 --> 00:08:48,959
sessions on the server

272
00:08:48,959 --> 00:08:51,600
and then the user agent is typically a

273
00:08:51,600 --> 00:08:53,760
long string that has to do with the

274
00:08:53,760 --> 00:08:55,440
software that the user is

275
00:08:55,440 --> 00:08:58,080
is using so the operating system the

276
00:08:58,080 --> 00:09:00,160
browser things like that

277
00:09:00,160 --> 00:09:02,720
and then the refer has info regarding

278
00:09:02,720 --> 00:09:03,200
the

279
00:09:03,200 --> 00:09:05,279
referring site if you were to to click

280
00:09:05,279 --> 00:09:07,200
on a link or whatever

281
00:09:07,200 --> 00:09:09,440
so these are just some of the the more

282
00:09:09,440 --> 00:09:10,320
common

283
00:09:10,320 --> 00:09:12,160
header fields but there are more so if

284
00:09:12,160 --> 00:09:14,240
you want to check out the http spec you

285
00:09:14,240 --> 00:09:15,839
can look more into that

286
00:09:15,839 --> 00:09:18,320
all right so http status codes are

287
00:09:18,320 --> 00:09:20,320
really important to understand at least

288
00:09:20,320 --> 00:09:22,240
the the most common ones

289
00:09:22,240 --> 00:09:23,760
so basically you have ranges you have

290
00:09:23,760 --> 00:09:26,320
the 100 through 500 range

291
00:09:26,320 --> 00:09:29,600
so 100 is informational basically this

292
00:09:29,600 --> 00:09:30,000
is

293
00:09:30,000 --> 00:09:31,839
uh it means the request has been

294
00:09:31,839 --> 00:09:34,480
received and the process is continuing

295
00:09:34,480 --> 00:09:35,760
it's processing

296
00:09:35,760 --> 00:09:38,880
200 means that it was successful

297
00:09:38,880 --> 00:09:41,200
so successfully received understood and

298
00:09:41,200 --> 00:09:42,399
accepted

299
00:09:42,399 --> 00:09:44,880
the 300 range usually has to do with

300
00:09:44,880 --> 00:09:46,399
redirection

301
00:09:46,399 --> 00:09:49,200
or further action must be taken 400

302
00:09:49,200 --> 00:09:51,440
range is a client error meaning that the

303
00:09:51,440 --> 00:09:53,120
request doesn't have what it needs from

304
00:09:53,120 --> 00:09:53,839
the client

305
00:09:53,839 --> 00:09:56,800
so let's say the server needs a name

306
00:09:56,800 --> 00:09:57,279
field

307
00:09:57,279 --> 00:09:59,040
sent in the in the request body and you

308
00:09:59,040 --> 00:10:00,399
don't send that you're going to get a

309
00:10:00,399 --> 00:10:01,519
400 error

310
00:10:01,519 --> 00:10:04,240
or somewhere in that range and then 500

311
00:10:04,240 --> 00:10:06,399
is usually a server error okay so the

312
00:10:06,399 --> 00:10:08,000
server failed to fulfill

313
00:10:08,000 --> 00:10:10,560
an apparent valid request so everything

314
00:10:10,560 --> 00:10:12,640
seems okay as far as what you send to

315
00:10:12,640 --> 00:10:14,320
the server but you still get an error

316
00:10:14,320 --> 00:10:16,800
something's wrong on the server side

317
00:10:16,800 --> 00:10:18,959
all right now these are some important

318
00:10:18,959 --> 00:10:21,279
status codes i should say common status

319
00:10:21,279 --> 00:10:22,959
codes that you should remember

320
00:10:22,959 --> 00:10:25,680
so 200 is just okay it means everything

321
00:10:25,680 --> 00:10:27,839
is is fine you make the request

322
00:10:27,839 --> 00:10:30,160
you get the html page you get a 200

323
00:10:30,160 --> 00:10:31,600
response

324
00:10:31,600 --> 00:10:34,079
201 is okay but it means something was

325
00:10:34,079 --> 00:10:35,440
created so if you're

326
00:10:35,440 --> 00:10:37,440
creating a blog post and everything goes

327
00:10:37,440 --> 00:10:39,519
okay then you might get a 200

328
00:10:39,519 --> 00:10:42,800
201 response 301 is

329
00:10:42,800 --> 00:10:44,959
usually moved to a new url so this has

330
00:10:44,959 --> 00:10:47,120
to do with redirection

331
00:10:47,120 --> 00:10:49,600
304 is typically not modified meaning

332
00:10:49,600 --> 00:10:50,320
that

333
00:10:50,320 --> 00:10:52,800
if you visit a page and it and it gets

334
00:10:52,800 --> 00:10:54,880
cached and it hasn't changed at all

335
00:10:54,880 --> 00:10:58,640
then you'll have a 304 response

336
00:10:58,640 --> 00:11:02,160
or status 400 again bad requests so if

337
00:11:02,160 --> 00:11:04,000
you're not sending the correct data

338
00:11:04,000 --> 00:11:07,279
to the server 401 is typically or is

339
00:11:07,279 --> 00:11:10,640
unauthorized so if you are missing a

340
00:11:10,640 --> 00:11:12,399
token or something like that

341
00:11:12,399 --> 00:11:14,000
you're not authorized you might get a

342
00:11:14,000 --> 00:11:16,880
401 404 we all know what that means it's

343
00:11:16,880 --> 00:11:17,200
not

344
00:11:17,200 --> 00:11:19,040
found if you're looking for some page on

345
00:11:19,040 --> 00:11:21,040
the server that doesn't exist

346
00:11:21,040 --> 00:11:22,720
or some resource that doesn't exist

347
00:11:22,720 --> 00:11:24,160
you're going to get a 404

348
00:11:24,160 --> 00:11:26,640
and then 500 is just an internal server

349
00:11:26,640 --> 00:11:28,320
error this could mean pretty much

350
00:11:28,320 --> 00:11:30,560
anything on the server side

351
00:11:30,560 --> 00:11:32,240
all right so those are the status codes

352
00:11:32,240 --> 00:11:33,760
those are really important to

353
00:11:33,760 --> 00:11:36,800
really memorize and understand so the

354
00:11:36,800 --> 00:11:38,000
last thing i want to quickly

355
00:11:38,000 --> 00:11:40,800
mention is that there is http version

356
00:11:40,800 --> 00:11:43,040
two we've been dealing with 1.1 for a

357
00:11:43,040 --> 00:11:45,200
long long time

358
00:11:45,200 --> 00:11:47,519
now all the changes to version 2 are

359
00:11:47,519 --> 00:11:49,040
pretty much under the hood meaning you

360
00:11:49,040 --> 00:11:50,639
don't have to go and change the way your

361
00:11:50,639 --> 00:11:52,079
applications work

362
00:11:52,079 --> 00:11:53,760
all the status codes everything like

363
00:11:53,760 --> 00:11:55,120
that is all the same

364
00:11:55,120 --> 00:11:58,160
it's just faster and more efficient okay

365
00:11:58,160 --> 00:11:59,839
so it does stuff like

366
00:11:59,839 --> 00:12:02,639
reduces latency by enabling full request

367
00:12:02,639 --> 00:12:04,480
and response multiplexing

368
00:12:04,480 --> 00:12:06,720
so it's faster it's more efficient it's

369
00:12:06,720 --> 00:12:07,920
more secure

370
00:12:07,920 --> 00:12:10,160
and this is just a simple image to kind

371
00:12:10,160 --> 00:12:11,440
of of show you

372
00:12:11,440 --> 00:12:13,920
um uh that it can you can use

373
00:12:13,920 --> 00:12:15,920
multiplexing so for instance

374
00:12:15,920 --> 00:12:18,880
we get our html page get a response get

375
00:12:18,880 --> 00:12:19,920
our style sheet

376
00:12:19,920 --> 00:12:21,920
get our response get our script get our

377
00:12:21,920 --> 00:12:24,000
response so this is 1.1

378
00:12:24,000 --> 00:12:26,399
with http 2 multiplexing we can get our

379
00:12:26,399 --> 00:12:28,320
html and then get

380
00:12:28,320 --> 00:12:30,800
all of our scripts and style sheets

381
00:12:30,800 --> 00:12:32,800
basically in one shot here and send the

382
00:12:32,800 --> 00:12:35,200
responses at the same time

383
00:12:35,200 --> 00:12:38,399
now i'm not extremely familiar with hdb2

384
00:12:38,399 --> 00:12:40,079
i haven't read the spec i haven't worked

385
00:12:40,079 --> 00:12:41,120
with it that much

386
00:12:41,120 --> 00:12:43,120
but just know it is available it is out

387
00:12:43,120 --> 00:12:45,200
there so you might want to look more

388
00:12:45,200 --> 00:12:46,000
into it

389
00:12:46,000 --> 00:12:47,120
all right so now we're going to jump

390
00:12:47,120 --> 00:12:48,639
into express so i can give you some

391
00:12:48,639 --> 00:12:49,440
examples

392
00:12:49,440 --> 00:12:52,320
on dealing with a request body and

393
00:12:52,320 --> 00:12:54,560
headers and sending status codes and

394
00:12:54,560 --> 00:12:56,320
stuff like that

395
00:12:56,320 --> 00:12:57,600
all right guys so we're going to jump

396
00:12:57,600 --> 00:12:59,600
into our little express server in a

397
00:12:59,600 --> 00:13:01,200
second but i just want to first show you

398
00:13:01,200 --> 00:13:02,079
an example

399
00:13:02,079 --> 00:13:04,160
on an actual website i'm just going to

400
00:13:04,160 --> 00:13:05,920
use my twitter profile but you can go to

401
00:13:05,920 --> 00:13:07,600
any website you want

402
00:13:07,600 --> 00:13:11,040
and go to your dev tools in my case my

403
00:13:11,040 --> 00:13:12,240
chrome dev tools

404
00:13:12,240 --> 00:13:14,480
and then click on the network tab and if

405
00:13:14,480 --> 00:13:16,560
i go ahead and reload the page here

406
00:13:16,560 --> 00:13:18,480
it's going to make all the requests it

407
00:13:18,480 --> 00:13:19,920
needs it's going to get all the files

408
00:13:19,920 --> 00:13:20,959
from the server

409
00:13:20,959 --> 00:13:23,440
and it's going to show them down here so

410
00:13:23,440 --> 00:13:25,040
you can see the different types

411
00:13:25,040 --> 00:13:27,279
the status of 200 which means they

412
00:13:27,279 --> 00:13:28,639
everything's okay

413
00:13:28,639 --> 00:13:32,000
the size this is the document the main

414
00:13:32,000 --> 00:13:34,160
html document and then we have all of

415
00:13:34,160 --> 00:13:35,760
our javascript files

416
00:13:35,760 --> 00:13:39,519
our style sheets our images xhr which is

417
00:13:39,519 --> 00:13:42,079
any ajax requests that were made

418
00:13:42,079 --> 00:13:43,360
but let's take a look at the main

419
00:13:43,360 --> 00:13:45,519
document here and

420
00:13:45,519 --> 00:13:47,040
under response you're going to see the

421
00:13:47,040 --> 00:13:49,519
body which is of course the html file

422
00:13:49,519 --> 00:13:52,720
okay same thing with preview now headers

423
00:13:52,720 --> 00:13:54,320
is where you can actually see all the

424
00:13:54,320 --> 00:13:56,240
different header fields and remember

425
00:13:56,240 --> 00:13:58,079
in the slides i showed you that there's

426
00:13:58,079 --> 00:13:59,360
three different sections

427
00:13:59,360 --> 00:14:02,000
general response and request so if we

428
00:14:02,000 --> 00:14:03,839
look at general you can see our request

429
00:14:03,839 --> 00:14:04,720
url

430
00:14:04,720 --> 00:14:07,040
which is just the entire url the request

431
00:14:07,040 --> 00:14:09,360
method is get we made a get request

432
00:14:09,360 --> 00:14:11,760
status code is 200 so everything's okay

433
00:14:11,760 --> 00:14:13,199
we get a little green dot

434
00:14:13,199 --> 00:14:16,079
the remote address and refer policy now

435
00:14:16,079 --> 00:14:17,839
if we look in response we have things

436
00:14:17,839 --> 00:14:19,600
like cache control there's a bunch of

437
00:14:19,600 --> 00:14:20,639
stuff here that

438
00:14:20,639 --> 00:14:22,079
i'm not going to explain some of the

439
00:14:22,079 --> 00:14:24,480
stuff i don't even understand

440
00:14:24,480 --> 00:14:26,160
but we have like the content length

441
00:14:26,160 --> 00:14:28,800
their security policy

442
00:14:28,800 --> 00:14:30,240
and then down here we should have like

443
00:14:30,240 --> 00:14:32,240
the content type

444
00:14:32,240 --> 00:14:34,959
which is text html the character set is

445
00:14:34,959 --> 00:14:36,560
utf-8

446
00:14:36,560 --> 00:14:40,240
the date um what else here we have

447
00:14:40,240 --> 00:14:42,399
set cookie so they set some cookies on

448
00:14:42,399 --> 00:14:44,639
the client

449
00:14:44,639 --> 00:14:47,440
status 200 down here we have like

450
00:14:47,440 --> 00:14:49,600
response time stuff like that

451
00:14:49,600 --> 00:14:51,360
and then in the request headers we have

452
00:14:51,360 --> 00:14:52,720
the authority which is the

453
00:14:52,720 --> 00:14:55,199
the root domain we have it's a get

454
00:14:55,199 --> 00:14:56,160
request

455
00:14:56,160 --> 00:15:00,079
the path is my profile https is the

456
00:15:00,079 --> 00:15:01,040
scheme

457
00:15:01,040 --> 00:15:04,000
and then down here at the very bottom we

458
00:15:04,000 --> 00:15:06,079
have the user agent which is this long

459
00:15:06,079 --> 00:15:08,399
string which describes my environment

460
00:15:08,399 --> 00:15:10,720
so it has it tells you i'm on a mac

461
00:15:10,720 --> 00:15:11,760
intel based

462
00:15:11,760 --> 00:15:14,639
os x um it's kind of confusing because

463
00:15:14,639 --> 00:15:17,120
it says mozilla it says safari and

464
00:15:17,120 --> 00:15:17,839
chrome

465
00:15:17,839 --> 00:15:20,000
i'm actually on chrome so it shows my

466
00:15:20,000 --> 00:15:22,000
the version of chrome that i'm on

467
00:15:22,000 --> 00:15:23,680
all right so that's the user agent so i

468
00:15:23,680 --> 00:15:25,360
just want you to take note of these

469
00:15:25,360 --> 00:15:26,320
values

470
00:15:26,320 --> 00:15:28,480
after what we went through in the slides

471
00:15:28,480 --> 00:15:29,759
and if you want to narrow

472
00:15:29,759 --> 00:15:32,000
it down by files we can see like all the

473
00:15:32,000 --> 00:15:33,839
css that was loaded

474
00:15:33,839 --> 00:15:35,600
so if i click on one of these i can see

475
00:15:35,600 --> 00:15:38,079
all the info for that file including the

476
00:15:38,079 --> 00:15:41,040
content type which is text css if i want

477
00:15:41,040 --> 00:15:43,440
to look at the ajax requests here

478
00:15:43,440 --> 00:15:46,000
so like this one right here this should

479
00:15:46,000 --> 00:15:47,519
be application slash

480
00:15:47,519 --> 00:15:50,160
jason and if we look at the response

481
00:15:50,160 --> 00:15:52,320
this is what it got us so the number of

482
00:15:52,320 --> 00:15:53,440
results

483
00:15:53,440 --> 00:15:55,759
some i guess some user information so

484
00:15:55,759 --> 00:15:56,800
these are all the different

485
00:15:56,800 --> 00:16:01,440
uh xhr or ajax requests that were made

486
00:16:01,440 --> 00:16:03,199
all right so when you use the fetch api

487
00:16:03,199 --> 00:16:06,079
or axios or old school ajax this is

488
00:16:06,079 --> 00:16:08,240
where it's going to show up so just get

489
00:16:08,240 --> 00:16:09,920
familiar with the network tab it's

490
00:16:09,920 --> 00:16:12,079
it's it can be a little daunting at

491
00:16:12,079 --> 00:16:13,360
first but

492
00:16:13,360 --> 00:16:15,360
it's it's really helpful it lets you

493
00:16:15,360 --> 00:16:17,040
know what's going on it shows you the

494
00:16:17,040 --> 00:16:19,279
load times and all that stuff

495
00:16:19,279 --> 00:16:21,279
all right so enough with that let's jump

496
00:16:21,279 --> 00:16:23,040
into

497
00:16:23,040 --> 00:16:24,880
i'm going to show you postman first and

498
00:16:24,880 --> 00:16:26,399
if you don't have this

499
00:16:26,399 --> 00:16:28,480
client which is just awesome especially

500
00:16:28,480 --> 00:16:30,160
if you're building apis

501
00:16:30,160 --> 00:16:33,199
you can get it at getpostman.com and as

502
00:16:33,199 --> 00:16:34,639
you can see i can make any type of

503
00:16:34,639 --> 00:16:35,680
request

504
00:16:35,680 --> 00:16:38,160
so get post put patch delete all these

505
00:16:38,160 --> 00:16:40,000
other ones to any url

506
00:16:40,000 --> 00:16:42,880
in fact i'll go ahead and make a request

507
00:16:42,880 --> 00:16:44,279
to

508
00:16:44,279 --> 00:16:49,440
twitter.com traversingmedia

509
00:16:49,440 --> 00:16:52,320
slash okay and i'm going to make sure

510
00:16:52,320 --> 00:16:54,160
it's a get request just like the browser

511
00:16:54,160 --> 00:16:54,800
made

512
00:16:54,800 --> 00:16:56,240
and i'm going to get the same exact

513
00:16:56,240 --> 00:16:58,000
thing i'm going to get all the html it

514
00:16:58,000 --> 00:16:59,519
doesn't render it

515
00:16:59,519 --> 00:17:02,240
um well actually can we preview it i've

516
00:17:02,240 --> 00:17:03,600
never actually tried to preview

517
00:17:03,600 --> 00:17:06,319
html is disabled would you like to

518
00:17:06,319 --> 00:17:07,919
proceed legacy

519
00:17:07,919 --> 00:17:10,959
yeah so whatever you get the html

520
00:17:10,959 --> 00:17:13,359
and then headers will give you all the

521
00:17:13,359 --> 00:17:14,720
response headers

522
00:17:14,720 --> 00:17:16,400
so we can see the content type that

523
00:17:16,400 --> 00:17:18,799
we're getting

524
00:17:18,799 --> 00:17:21,599
set cookie status all that stuff if we

525
00:17:21,599 --> 00:17:23,359
want to look at the cookies we have that

526
00:17:23,359 --> 00:17:24,799
tab as well

527
00:17:24,799 --> 00:17:27,039
it shows us the status up here as well

528
00:17:27,039 --> 00:17:29,919
with the load time and the size

529
00:17:29,919 --> 00:17:31,919
okay so we can make any requests from

530
00:17:31,919 --> 00:17:33,200
here that we can

531
00:17:33,200 --> 00:17:35,679
make in the browser and more because we

532
00:17:35,679 --> 00:17:37,520
can actually do put and delete and all

533
00:17:37,520 --> 00:17:38,400
that stuff

534
00:17:38,400 --> 00:17:40,559
so this is a fantastic tool for testing

535
00:17:40,559 --> 00:17:42,160
apis

536
00:17:42,160 --> 00:17:45,520
that you're building so let's jump into

537
00:17:45,520 --> 00:17:46,160
express

538
00:17:46,160 --> 00:17:48,080
real quick i just have a basic express

539
00:17:48,080 --> 00:17:49,280
server running here

540
00:17:49,280 --> 00:17:52,799
on localhost 5000 and

541
00:17:52,799 --> 00:17:54,000
don't worry about it if you're not

542
00:17:54,000 --> 00:17:55,679
familiar with express basically all

543
00:17:55,679 --> 00:17:56,960
we're doing here is

544
00:17:56,960 --> 00:18:00,000
bringing it in initializing it setting

545
00:18:00,000 --> 00:18:02,960
it to listen on port 5000 and we have

546
00:18:02,960 --> 00:18:03,280
one

547
00:18:03,280 --> 00:18:06,799
endpoint meaning that if we make a get

548
00:18:06,799 --> 00:18:07,360
request

549
00:18:07,360 --> 00:18:10,400
so we said app.get to slash which is the

550
00:18:10,400 --> 00:18:11,520
index page

551
00:18:11,520 --> 00:18:13,440
it's going to run this function that has

552
00:18:13,440 --> 00:18:15,520
access to this request and response

553
00:18:15,520 --> 00:18:16,559
object

554
00:18:16,559 --> 00:18:19,120
and with our response object we can call

555
00:18:19,120 --> 00:18:20,240
dot send

556
00:18:20,240 --> 00:18:22,720
which will just send basically just

557
00:18:22,720 --> 00:18:24,320
whatever we put in here

558
00:18:24,320 --> 00:18:27,360
to the the client okay in this case just

559
00:18:27,360 --> 00:18:29,520
a string of hello from express

560
00:18:29,520 --> 00:18:32,720
so if i go to postman and i make a get

561
00:18:32,720 --> 00:18:35,440
request to http

562
00:18:35,440 --> 00:18:39,120
localhost port 5000 i get hello from

563
00:18:39,120 --> 00:18:39,919
express

564
00:18:39,919 --> 00:18:41,440
and i could do the same thing in the

565
00:18:41,440 --> 00:18:43,840
browser

566
00:18:47,120 --> 00:18:51,039
get hello from express all right if i

567
00:18:51,039 --> 00:18:55,280
open my network tab and reload

568
00:18:55,280 --> 00:18:57,760
oh i'm going to go to all here and you

569
00:18:57,760 --> 00:18:59,440
can see that i get a 304

570
00:18:59,440 --> 00:19:01,760
which means not modified because it was

571
00:19:01,760 --> 00:19:03,200
cached and it didn't change

572
00:19:03,200 --> 00:19:06,799
so it gave me this 304. if i were to

573
00:19:06,799 --> 00:19:09,840
change this like say hello from express1

574
00:19:09,840 --> 00:19:11,919
and save and go and reload

575
00:19:11,919 --> 00:19:14,720
now i get a 200 if i reload again i get

576
00:19:14,720 --> 00:19:16,880
a 304 because it didn't change

577
00:19:16,880 --> 00:19:19,440
but over here i can see all my headers

578
00:19:19,440 --> 00:19:21,520
so same stuff that i saw with twitter

579
00:19:21,520 --> 00:19:23,200
there's just a lot less

580
00:19:23,200 --> 00:19:24,960
because there's a lot less going on

581
00:19:24,960 --> 00:19:27,039
alright so in postman same thing i can

582
00:19:27,039 --> 00:19:28,400
see all my headers

583
00:19:28,400 --> 00:19:31,120
now with postman i can send all kinds of

584
00:19:31,120 --> 00:19:32,160
stuff i can send

585
00:19:32,160 --> 00:19:35,200
a request body i can send headers so we

586
00:19:35,200 --> 00:19:37,760
have a lot more freedom to

587
00:19:37,760 --> 00:19:39,760
to to basically interact with the

588
00:19:39,760 --> 00:19:42,240
request and response cycle

589
00:19:42,240 --> 00:19:45,280
now in express actually one thing i want

590
00:19:45,280 --> 00:19:46,880
to show you

591
00:19:46,880 --> 00:19:50,400
is the content type which by default if

592
00:19:50,400 --> 00:19:52,559
you use res.send and you just send a

593
00:19:52,559 --> 00:19:53,600
string it's going to be

594
00:19:53,600 --> 00:19:57,280
html okay in fact i could

595
00:19:57,280 --> 00:19:59,679
put i don't want to make this too much

596
00:19:59,679 --> 00:20:02,480
about express but i could put

597
00:20:02,480 --> 00:20:04,640
html right in here and if i go to my

598
00:20:04,640 --> 00:20:06,799
browser you can see that that actually

599
00:20:06,799 --> 00:20:08,159
renders

600
00:20:08,159 --> 00:20:11,120
all right now if i were to put jason in

601
00:20:11,120 --> 00:20:12,960
here

602
00:20:12,960 --> 00:20:16,720
let's get rid of this and let's say

603
00:20:16,720 --> 00:20:20,159
msg we'll just say message hello and i

604
00:20:20,159 --> 00:20:21,360
save that

605
00:20:21,360 --> 00:20:24,000
and we go back to postman and send you

606
00:20:24,000 --> 00:20:26,799
can see the content type has changed so

607
00:20:26,799 --> 00:20:30,000
with express res.send will basically

608
00:20:30,000 --> 00:20:31,679
detect to the content type

609
00:20:31,679 --> 00:20:35,360
as best as it can okay but there is

610
00:20:35,360 --> 00:20:38,320
a res.json which is what you should use

611
00:20:38,320 --> 00:20:41,039
if you're sending json so if i do that

612
00:20:41,039 --> 00:20:43,360
it'll give me the same thing all right

613
00:20:43,360 --> 00:20:45,600
it shows the json in the body

614
00:20:45,600 --> 00:20:48,799
now we can also get our header

615
00:20:48,799 --> 00:20:51,360
values or header fields if we want so

616
00:20:51,360 --> 00:20:54,320
i'm just going to do a res.send just to

617
00:20:54,320 --> 00:20:56,000
kind of show you the output of this but

618
00:20:56,000 --> 00:20:57,360
if i take my request

619
00:20:57,360 --> 00:21:00,480
object i can do dot header

620
00:21:00,480 --> 00:21:02,559
and then in parentheses any header value

621
00:21:02,559 --> 00:21:04,559
i want like let's say the host

622
00:21:04,559 --> 00:21:07,200
so i save that and i go back to postman

623
00:21:07,200 --> 00:21:09,840
and send i get a response with my host

624
00:21:09,840 --> 00:21:12,960
localhost 5000. okay if i wanted let's

625
00:21:12,960 --> 00:21:14,240
say the user agent

626
00:21:14,240 --> 00:21:17,760
we'll do user das dash agent

627
00:21:17,760 --> 00:21:20,240
and if we go back and send we get in

628
00:21:20,240 --> 00:21:20,799
this case

629
00:21:20,799 --> 00:21:22,640
postman runtime because i'm using

630
00:21:22,640 --> 00:21:24,559
postman as a client so this is going to

631
00:21:24,559 --> 00:21:26,720
be different than what we saw in chrome

632
00:21:26,720 --> 00:21:29,760
if i go back to chrome and reload we're

633
00:21:29,760 --> 00:21:31,120
going to see this

634
00:21:31,120 --> 00:21:33,039
okay which is different because we're

635
00:21:33,039 --> 00:21:34,799
using a different utility a different

636
00:21:34,799 --> 00:21:36,080
client

637
00:21:36,080 --> 00:21:37,919
all right so just wanted to show you we

638
00:21:37,919 --> 00:21:39,600
could do that

639
00:21:39,600 --> 00:21:42,480
we can also get just the raw headers so

640
00:21:42,480 --> 00:21:44,559
basically all of them if we do request

641
00:21:44,559 --> 00:21:49,120
dot raw headers

642
00:21:50,159 --> 00:21:52,400
and if we go back to postman and send

643
00:21:52,400 --> 00:21:54,880
you can see we basically get an array

644
00:21:54,880 --> 00:21:58,320
with all the headers the cache control

645
00:21:58,320 --> 00:22:00,559
postman token since we're using postman

646
00:22:00,559 --> 00:22:01,919
the user agent

647
00:22:01,919 --> 00:22:05,679
the accept value the host all that stuff

648
00:22:05,679 --> 00:22:08,000
okay and we can send headers as well

649
00:22:08,000 --> 00:22:10,559
which i'll show you in a little bit

650
00:22:10,559 --> 00:22:14,000
so we can get header values um what else

651
00:22:14,000 --> 00:22:16,159
do i want to show you

652
00:22:16,159 --> 00:22:20,240
so let's actually

653
00:22:20,400 --> 00:22:22,640
let's change this to a different row

654
00:22:22,640 --> 00:22:23,840
let's do like

655
00:22:23,840 --> 00:22:25,840
slash contact we'll say that this is a

656
00:22:25,840 --> 00:22:27,200
contact form

657
00:22:27,200 --> 00:22:28,799
and what i want to show you now is how

658
00:22:28,799 --> 00:22:30,400
we can send data

659
00:22:30,400 --> 00:22:32,880
to the server in the request body when

660
00:22:32,880 --> 00:22:34,720
we send a request we can attach

661
00:22:34,720 --> 00:22:37,200
data to that to the body and the way

662
00:22:37,200 --> 00:22:39,039
that we access that i'll just go ahead

663
00:22:39,039 --> 00:22:40,640
and send it so we can

664
00:22:40,640 --> 00:22:42,720
view it the way that we access that is

665
00:22:42,720 --> 00:22:43,679
with that request

666
00:22:43,679 --> 00:22:47,840
object has body so re request dot body

667
00:22:47,840 --> 00:22:51,440
now this won't work for for adjacent

668
00:22:51,440 --> 00:22:53,039
data unless you put this piece of

669
00:22:53,039 --> 00:22:54,080
middleware in

670
00:22:54,080 --> 00:22:55,919
and it won't work for form data unless

671
00:22:55,919 --> 00:22:58,080
you put this in that's just an express

672
00:22:58,080 --> 00:22:58,799
thing

673
00:22:58,799 --> 00:23:01,039
all right but let's go ahead and save

674
00:23:01,039 --> 00:23:02,159
that

675
00:23:02,159 --> 00:23:05,520
excuse me and let's make a request here

676
00:23:05,520 --> 00:23:06,960
to

677
00:23:06,960 --> 00:23:08,240
actually i want to i'm sorry i want to

678
00:23:08,240 --> 00:23:10,480
change it to a post request

679
00:23:10,480 --> 00:23:12,080
okay if you're sending data you want it

680
00:23:12,080 --> 00:23:14,080
to be a post so we simply change

681
00:23:14,080 --> 00:23:16,880
get to post here so i'm going to save

682
00:23:16,880 --> 00:23:18,799
that and go back

683
00:23:18,799 --> 00:23:22,159
and then make a post request to slash

684
00:23:22,159 --> 00:23:25,120
contact now if i just send it as is i

685
00:23:25,120 --> 00:23:27,679
get an empty object because request.body

686
00:23:27,679 --> 00:23:27,919
is

687
00:23:27,919 --> 00:23:30,559
empty however if i want to send any data

688
00:23:30,559 --> 00:23:32,159
i can click on the body tab and

689
00:23:32,159 --> 00:23:33,679
typically you would do this in your

690
00:23:33,679 --> 00:23:35,440
front end like in your javascript

691
00:23:35,440 --> 00:23:36,480
whether it's react

692
00:23:36,480 --> 00:23:39,360
or angular or whatever but this is just

693
00:23:39,360 --> 00:23:39,840
for

694
00:23:39,840 --> 00:23:43,360
basically testing apis

695
00:23:43,360 --> 00:23:45,600
so from here i could send form data if i

696
00:23:45,600 --> 00:23:48,120
want now notice when i click this

697
00:23:48,120 --> 00:23:51,120
www form url encoded

698
00:23:51,120 --> 00:23:53,600
it automatically puts a content type in

699
00:23:53,600 --> 00:23:54,960
my header

700
00:23:54,960 --> 00:23:57,360
okay because you need to send this along

701
00:23:57,360 --> 00:23:59,120
too so we're actually sending a header

702
00:23:59,120 --> 00:24:00,159
value here

703
00:24:00,159 --> 00:24:02,080
and then in the body i could put a key

704
00:24:02,080 --> 00:24:03,200
like let's say name

705
00:24:03,200 --> 00:24:05,440
so this is just simulating a form on a

706
00:24:05,440 --> 00:24:06,559
website

707
00:24:06,559 --> 00:24:10,000
so we'll say value brad

708
00:24:10,000 --> 00:24:13,200
and let's do email and

709
00:24:13,200 --> 00:24:17,120
brad at gmail okay so if i go ahead and

710
00:24:17,120 --> 00:24:18,720
send that we're going to see that down

711
00:24:18,720 --> 00:24:20,320
here because

712
00:24:20,320 --> 00:24:23,840
we sent that we sent the request.body

713
00:24:23,840 --> 00:24:27,760
if i do just request.body.name

714
00:24:27,760 --> 00:24:31,679
and i send that we just get brad

715
00:24:31,679 --> 00:24:34,960
all right and you see how i sent the

716
00:24:34,960 --> 00:24:36,880
content type in the header if i want to

717
00:24:36,880 --> 00:24:38,640
access that

718
00:24:38,640 --> 00:24:43,120
i can do request.header

719
00:24:43,120 --> 00:24:47,360
and i can grab the content dash

720
00:24:47,360 --> 00:24:50,880
type and

721
00:24:50,880 --> 00:24:53,440
let's go back and send and we get this

722
00:24:53,440 --> 00:24:56,159
url encoded that's the type

723
00:24:56,159 --> 00:24:58,880
all right we can also send raw json so

724
00:24:58,880 --> 00:25:00,159
if i go ahead and

725
00:25:00,159 --> 00:25:03,200
get rid of that header and put in

726
00:25:03,200 --> 00:25:04,960
a different content type we actually get

727
00:25:04,960 --> 00:25:06,559
a little drop down here

728
00:25:06,559 --> 00:25:08,400
so content type i'm going to set it to

729
00:25:08,400 --> 00:25:10,880
application slash json

730
00:25:10,880 --> 00:25:12,880
go to body and instead of this url

731
00:25:12,880 --> 00:25:14,080
encoded i'm going to choose

732
00:25:14,080 --> 00:25:17,279
raw okay because we can send raw jason

733
00:25:17,279 --> 00:25:19,919
so name

734
00:25:21,279 --> 00:25:24,799
and we'll say john doe

735
00:25:25,919 --> 00:25:28,080
and i'll go ahead and send and i get

736
00:25:28,080 --> 00:25:30,000
application json because that's the

737
00:25:30,000 --> 00:25:31,279
content type

738
00:25:31,279 --> 00:25:33,360
but again i could access the body if i

739
00:25:33,360 --> 00:25:35,120
want so if i want to get rid of that and

740
00:25:35,120 --> 00:25:36,159
just do

741
00:25:36,159 --> 00:25:40,640
request dot body and save

742
00:25:40,640 --> 00:25:43,520
and send that we get our json of john

743
00:25:43,520 --> 00:25:44,559
doe

744
00:25:44,559 --> 00:25:46,559
all right if we look at the headers

745
00:25:46,559 --> 00:25:48,320
content type

746
00:25:48,320 --> 00:25:50,159
okay so hopefully this is kind of making

747
00:25:50,159 --> 00:25:51,440
sense to you guys that

748
00:25:51,440 --> 00:25:53,360
that don't have a lot of experience with

749
00:25:53,360 --> 00:25:54,720
this type of thing

750
00:25:54,720 --> 00:25:58,880
now what about statuses in postman if i

751
00:25:58,880 --> 00:26:02,000
make a post request to contact one

752
00:26:02,000 --> 00:26:04,080
and i send that you can see that i get a

753
00:26:04,080 --> 00:26:06,240
status of 404. you guys all know what

754
00:26:06,240 --> 00:26:07,679
that means it's not found

755
00:26:07,679 --> 00:26:09,600
and it just gives me this cannot post

756
00:26:09,600 --> 00:26:11,039
contact one

757
00:26:11,039 --> 00:26:13,520
so we can send our own statuses i mean

758
00:26:13,520 --> 00:26:15,760
when we do a successful res.send or

759
00:26:15,760 --> 00:26:17,120
res.json

760
00:26:17,120 --> 00:26:19,600
it's automatically 200 but we can have

761
00:26:19,600 --> 00:26:20,480
conditionals

762
00:26:20,480 --> 00:26:22,720
and create different statuses based on

763
00:26:22,720 --> 00:26:23,919
that

764
00:26:23,919 --> 00:26:26,400
so let's say that this route we actually

765
00:26:26,400 --> 00:26:28,240
need to have a name if there's no name

766
00:26:28,240 --> 00:26:29,679
we want to send back

767
00:26:29,679 --> 00:26:32,080
a 400 response which means it's a bad

768
00:26:32,080 --> 00:26:33,200
request

769
00:26:33,200 --> 00:26:36,559
so i'll simply do an if statement here

770
00:26:36,559 --> 00:26:40,320
and let's say if not request dot

771
00:26:40,320 --> 00:26:43,520
body dot name

772
00:26:43,520 --> 00:26:46,240
then let's go ahead and do a res i'm

773
00:26:46,240 --> 00:26:48,720
sorry we want to return

774
00:26:48,720 --> 00:26:52,240
a res dot status okay so this is how we

775
00:26:52,240 --> 00:26:53,840
can send a status code and i'm going to

776
00:26:53,840 --> 00:26:55,360
send a 400

777
00:26:55,360 --> 00:26:58,080
and then after that we could do dot json

778
00:26:58,080 --> 00:26:58,400
or

779
00:26:58,400 --> 00:27:01,360
dot send i'm going to do dot send and

780
00:27:01,360 --> 00:27:02,480
i'm just going to say

781
00:27:02,480 --> 00:27:06,080
name is required

782
00:27:06,080 --> 00:27:07,760
all right now i'm going to go under the

783
00:27:07,760 --> 00:27:10,400
if statement if a name is included then

784
00:27:10,400 --> 00:27:12,799
and typically you would do like some

785
00:27:12,799 --> 00:27:14,159
database stuff

786
00:27:14,159 --> 00:27:17,279
here you would put the the contact into

787
00:27:17,279 --> 00:27:19,120
the database or whatever

788
00:27:19,120 --> 00:27:21,360
but i'm going to do a res and i'm going

789
00:27:21,360 --> 00:27:22,399
to do another

790
00:27:22,399 --> 00:27:24,799
status here of 201 which means that

791
00:27:24,799 --> 00:27:26,480
everything's okay and something was

792
00:27:26,480 --> 00:27:27,440
created

793
00:27:27,440 --> 00:27:29,360
okay it means created and i'll do a dot

794
00:27:29,360 --> 00:27:30,559
send

795
00:27:30,559 --> 00:27:33,039
and then let's just do i'll put a

796
00:27:33,039 --> 00:27:33,600
template

797
00:27:33,600 --> 00:27:36,640
string in here and say thank you

798
00:27:36,640 --> 00:27:38,320
and then we can actually put in the

799
00:27:38,320 --> 00:27:39,679
request dot

800
00:27:39,679 --> 00:27:42,880
body dot name all right so let's save

801
00:27:42,880 --> 00:27:45,760
that let's go back to postman

802
00:27:45,760 --> 00:27:48,240
and let's get rid of the name here let's

803
00:27:48,240 --> 00:27:50,960
not send it

804
00:27:51,279 --> 00:27:53,840
and we get name is required okay because

805
00:27:53,840 --> 00:27:55,600
it's looking for that in the body

806
00:27:55,600 --> 00:27:58,720
in the request body so if i send it

807
00:27:58,720 --> 00:27:59,919
actually i'll just

808
00:27:59,919 --> 00:28:02,960
undo that so if i say name john

809
00:28:02,960 --> 00:28:04,960
and i send now we get thank you john

810
00:28:04,960 --> 00:28:06,960
because it passes we're sending that

811
00:28:06,960 --> 00:28:10,000
that request.body.name

812
00:28:10,000 --> 00:28:13,039
okay let's see so the next thing

813
00:28:13,039 --> 00:28:16,640
i want to look at is header values now

814
00:28:16,640 --> 00:28:19,279
a lot of times when you're dealing with

815
00:28:19,279 --> 00:28:21,279
full stack applications you

816
00:28:21,279 --> 00:28:24,880
use tokens or json web tokens for um

817
00:28:24,880 --> 00:28:27,600
for authentication and you send that and

818
00:28:27,600 --> 00:28:28,840
you can either send it in the

819
00:28:28,840 --> 00:28:30,080
authorization

820
00:28:30,080 --> 00:28:33,360
i like to send it in x off token

821
00:28:33,360 --> 00:28:35,520
in a value called x auth token so what

822
00:28:35,520 --> 00:28:38,559
i'll do here is create another route

823
00:28:38,559 --> 00:28:41,760
let's do app dot we'll do post

824
00:28:41,760 --> 00:28:46,240
to let's say slash login

825
00:28:48,720 --> 00:28:50,240
all right and then what i want to do

826
00:28:50,240 --> 00:28:51,760
here is check for a token

827
00:28:51,760 --> 00:28:56,080
in the header so i'm going to say if

828
00:28:56,880 --> 00:28:58,640
there's no and then the way that we

829
00:28:58,640 --> 00:29:00,960
access header values i already showed

830
00:29:00,960 --> 00:29:02,480
you this we can do request

831
00:29:02,480 --> 00:29:05,760
dot header

832
00:29:05,760 --> 00:29:08,159
and then i'm going to check for x dash

833
00:29:08,159 --> 00:29:10,480
off

834
00:29:10,640 --> 00:29:14,399
dash token okay so if that's not there

835
00:29:14,399 --> 00:29:15,279
then let's send

836
00:29:15,279 --> 00:29:17,919
let's send an error let's do return and

837
00:29:17,919 --> 00:29:19,440
one thing i want to mention is notice i

838
00:29:19,440 --> 00:29:20,720
did the return

839
00:29:20,720 --> 00:29:23,440
status here and not here it's because

840
00:29:23,440 --> 00:29:25,120
you don't need it if it's the

841
00:29:25,120 --> 00:29:28,080
only or the last one but if you have it

842
00:29:28,080 --> 00:29:29,840
before if you have another response here

843
00:29:29,840 --> 00:29:31,760
even if it's within an if statement that

844
00:29:31,760 --> 00:29:32,880
doesn't pass

845
00:29:32,880 --> 00:29:34,320
you're going to get an error that says

846
00:29:34,320 --> 00:29:36,159
headers already sent so make sure you

847
00:29:36,159 --> 00:29:38,080
use return up here

848
00:29:38,080 --> 00:29:40,039
okay so i'm just going to return

849
00:29:40,039 --> 00:29:42,240
res.status

850
00:29:42,240 --> 00:29:46,000
and let's say if no token

851
00:29:46,000 --> 00:29:48,000
is included in the header then we'll

852
00:29:48,000 --> 00:29:49,520
send to 400

853
00:29:49,520 --> 00:29:51,360
and we'll just send an error that says

854
00:29:51,360 --> 00:29:54,240
no token

855
00:29:54,240 --> 00:29:57,440
okay now let's do a pretend validation

856
00:29:57,440 --> 00:29:59,279
for the token so

857
00:29:59,279 --> 00:30:03,159
i'll go ahead and just say if the

858
00:30:03,159 --> 00:30:06,159
request.header

859
00:30:06,840 --> 00:30:09,120
x dash auth

860
00:30:09,120 --> 00:30:12,720
dash token let's say if that

861
00:30:12,720 --> 00:30:16,480
is not equal to the string of 1 2

862
00:30:16,480 --> 00:30:21,039
3 4 5 6 then it's going to be invalid so

863
00:30:21,039 --> 00:30:22,720
i'm going to return

864
00:30:22,720 --> 00:30:26,159
a response status of 401 which is

865
00:30:26,159 --> 00:30:29,600
unauthorized so i'll do send

866
00:30:29,600 --> 00:30:32,960
and we'll just say not

867
00:30:32,960 --> 00:30:35,440
authorized okay and then down here if

868
00:30:35,440 --> 00:30:38,880
everything passes we'll do a res.send

869
00:30:38,880 --> 00:30:42,480
and we'll say logged in

870
00:30:42,480 --> 00:30:45,440
so we're just kind of simulating a login

871
00:30:45,440 --> 00:30:45,919
process

872
00:30:45,919 --> 00:30:47,760
obviously it would be much more in depth

873
00:30:47,760 --> 00:30:49,760
we'd need to use actual token

874
00:30:49,760 --> 00:30:52,000
json web tokens and validate them and so

875
00:30:52,000 --> 00:30:54,399
on but let's save that let's try this

876
00:30:54,399 --> 00:30:56,159
out so if we go

877
00:30:56,159 --> 00:30:58,399
back to postman make a post request to

878
00:30:58,399 --> 00:30:59,200
slash

879
00:30:59,200 --> 00:31:03,200
login and we don't need any body data

880
00:31:03,200 --> 00:31:04,000
because we're just dealing

881
00:31:04,000 --> 00:31:06,480
with headers and we can clear out

882
00:31:06,480 --> 00:31:08,559
content type let's just send that

883
00:31:08,559 --> 00:31:11,039
so we get no token now i'm going to add

884
00:31:11,039 --> 00:31:12,080
a header value of

885
00:31:12,080 --> 00:31:15,919
x dash auth dash token

886
00:31:15,919 --> 00:31:18,000
but i'm going to do 1 2 three four five

887
00:31:18,000 --> 00:31:19,279
which is wrong

888
00:31:19,279 --> 00:31:21,679
so we get not authorized if i do one

889
00:31:21,679 --> 00:31:23,120
through six

890
00:31:23,120 --> 00:31:25,760
we get logged in okay so just an example

891
00:31:25,760 --> 00:31:28,320
of of how you can authenticate through

892
00:31:28,320 --> 00:31:32,399
um tokens in the in the headers

893
00:31:32,399 --> 00:31:34,240
okay and by the way if you're interested

894
00:31:34,240 --> 00:31:36,559
in we do this in my mern stat course we

895
00:31:36,559 --> 00:31:37,200
do all this

896
00:31:37,200 --> 00:31:40,559
this type of stuff all right so

897
00:31:40,559 --> 00:31:44,880
let's do uh let's simulate a put request

898
00:31:44,880 --> 00:31:48,240
so i'm just going to get rid of this

899
00:31:48,320 --> 00:31:52,080
so for put requests we would do app.put

900
00:31:52,080 --> 00:31:55,360
and maybe it's like a blog post so we'd

901
00:31:55,360 --> 00:31:56,320
have like slash

902
00:31:56,320 --> 00:31:58,480
posts now usually you'd have to identify

903
00:31:58,480 --> 00:32:00,159
which post you're updating

904
00:32:00,159 --> 00:32:02,399
and you would do that within the url so

905
00:32:02,399 --> 00:32:03,440
it would be like

906
00:32:03,440 --> 00:32:08,320
colon id which is like a placeholder

907
00:32:08,880 --> 00:32:11,120
all right and i know that we're doing a

908
00:32:11,120 --> 00:32:11,919
lot of express

909
00:32:11,919 --> 00:32:14,720
stuff but my goal here is to just get

910
00:32:14,720 --> 00:32:16,080
you familiar with

911
00:32:16,080 --> 00:32:19,200
sending request body fields header

912
00:32:19,200 --> 00:32:21,360
fields dealing with that

913
00:32:21,360 --> 00:32:24,640
sending status codes back so

914
00:32:24,640 --> 00:32:27,039
here usually what would happen is we

915
00:32:27,039 --> 00:32:30,559
would do some database stuff

916
00:32:32,080 --> 00:32:35,679
so database stuff to update the

917
00:32:35,679 --> 00:32:38,960
the post and then send back a response

918
00:32:38,960 --> 00:32:43,760
let's do a res.json

919
00:32:43,760 --> 00:32:46,080
and we'll send the id now if you want to

920
00:32:46,080 --> 00:32:48,240
get the id that's passed in you can

921
00:32:48,240 --> 00:32:50,320
actually use request

922
00:32:50,320 --> 00:32:53,120
dot params and then whatever the param

923
00:32:53,120 --> 00:32:54,720
in this case id

924
00:32:54,720 --> 00:32:56,640
and then the title we're going to send

925
00:32:56,640 --> 00:32:58,480
in the body so i'll do request

926
00:32:58,480 --> 00:33:02,320
dot body dot title

927
00:33:02,320 --> 00:33:04,159
okay so request params is going to

928
00:33:04,159 --> 00:33:05,679
access the url values

929
00:33:05,679 --> 00:33:07,919
request body will access the form data

930
00:33:07,919 --> 00:33:09,600
or the json data that you send in the

931
00:33:09,600 --> 00:33:10,640
body

932
00:33:10,640 --> 00:33:13,200
so we'll save that and from postman we

933
00:33:13,200 --> 00:33:15,279
can make a put request

934
00:33:15,279 --> 00:33:18,480
to slash and we'll do

935
00:33:18,480 --> 00:33:21,760
post slash 99

936
00:33:21,760 --> 00:33:24,120
okay so this will get accessed with

937
00:33:24,120 --> 00:33:25,600
request.params and then

938
00:33:25,600 --> 00:33:28,320
in the body since we're going to be

939
00:33:28,320 --> 00:33:30,000
sending data we actually have to add a

940
00:33:30,000 --> 00:33:33,440
header value of content type

941
00:33:33,440 --> 00:33:35,600
and i'm just going to send raw json so

942
00:33:35,600 --> 00:33:36,880
we'll do

943
00:33:36,880 --> 00:33:39,840
application jason and then let's send

944
00:33:39,840 --> 00:33:42,480
the title

945
00:33:42,960 --> 00:33:47,120
so title my blog post

946
00:33:47,120 --> 00:33:49,760
and if we send we get a response back

947
00:33:49,760 --> 00:33:51,840
with the id of 99 because that's what we

948
00:33:51,840 --> 00:33:53,279
put in here and then

949
00:33:53,279 --> 00:33:55,440
the title that's what we put in the body

950
00:33:55,440 --> 00:33:57,279
and i could put anything

951
00:33:57,279 --> 00:34:01,200
at all in here okay so hopefully that

952
00:34:01,200 --> 00:34:01,919
just

953
00:34:01,919 --> 00:34:04,320
gives you a good an idea of how put

954
00:34:04,320 --> 00:34:05,760
requests work

955
00:34:05,760 --> 00:34:07,360
but typically you would do an update of

956
00:34:07,360 --> 00:34:09,679
the database using that id

957
00:34:09,679 --> 00:34:11,599
and then delete would would basically be

958
00:34:11,599 --> 00:34:13,679
the same thing

959
00:34:13,679 --> 00:34:16,879
so we just do app.delete and

960
00:34:16,879 --> 00:34:19,359
include the id delete it in the database

961
00:34:19,359 --> 00:34:20,239
and then return

962
00:34:20,239 --> 00:34:22,480
maybe most likely not going to return

963
00:34:22,480 --> 00:34:24,239
the post because it's deleted so you

964
00:34:24,239 --> 00:34:27,359
might do something like a message

965
00:34:27,359 --> 00:34:30,639
a message and say post

966
00:34:30,639 --> 00:34:33,918
actually what we could do is we could

967
00:34:33,918 --> 00:34:34,560
say

968
00:34:34,560 --> 00:34:39,759
post and then take the id

969
00:34:40,159 --> 00:34:43,760
and say deleted okay so now from postman

970
00:34:43,760 --> 00:34:46,239
we could make a delete request

971
00:34:46,239 --> 00:34:49,040
we don't need any of this we don't need

972
00:34:49,040 --> 00:34:50,320
this and the headers

973
00:34:50,320 --> 00:34:52,879
we could just send that we get post that

974
00:34:52,879 --> 00:34:54,960
deleted

975
00:34:54,960 --> 00:34:57,680
all right so yeah i mean hopefully this

976
00:34:57,680 --> 00:34:59,599
helps a little bit

977
00:34:59,599 --> 00:35:01,440
understand how this goes now with

978
00:35:01,440 --> 00:35:03,040
express we can set

979
00:35:03,040 --> 00:35:05,760
a static folder and this pertains to if

980
00:35:05,760 --> 00:35:07,839
you just have a static html website

981
00:35:07,839 --> 00:35:10,560
where you have a bunch of css files and

982
00:35:10,560 --> 00:35:12,800
you know javascript files and stuff like

983
00:35:12,800 --> 00:35:13,760
that so

984
00:35:13,760 --> 00:35:16,480
in express what we can do is we can

985
00:35:16,480 --> 00:35:16,960
actually

986
00:35:16,960 --> 00:35:19,440
set a specific folder to be our static

987
00:35:19,440 --> 00:35:20,320
folder

988
00:35:20,320 --> 00:35:24,480
and we do that with app dot use

989
00:35:24,480 --> 00:35:27,520
and in here i can just say

990
00:35:27,520 --> 00:35:32,320
express dot static

991
00:35:32,480 --> 00:35:34,400
and then here i can put the location of

992
00:35:34,400 --> 00:35:36,160
the folder which is going to just be

993
00:35:36,160 --> 00:35:37,280
public

994
00:35:37,280 --> 00:35:39,680
so now in my folder structure actually i

995
00:35:39,680 --> 00:35:41,359
already have a public folder i forgot i

996
00:35:41,359 --> 00:35:42,240
created that

997
00:35:42,240 --> 00:35:44,480
with an index html file that just says

998
00:35:44,480 --> 00:35:45,920
hello world

999
00:35:45,920 --> 00:35:48,079
so i should be able even though i don't

1000
00:35:48,079 --> 00:35:49,440
have a route

1001
00:35:49,440 --> 00:35:52,079
for my index page i have this static

1002
00:35:52,079 --> 00:35:54,720
folder so that should load the html file

1003
00:35:54,720 --> 00:35:57,280
if i go to my browser we can see it

1004
00:35:57,280 --> 00:35:59,680
there and if i go to postman

1005
00:35:59,680 --> 00:36:02,800
we can see oops we want to make get

1006
00:36:02,800 --> 00:36:06,560
to the index and now we can see the

1007
00:36:06,560 --> 00:36:07,520
hello world

1008
00:36:07,520 --> 00:36:09,680
if i wanted to create like some css

1009
00:36:09,680 --> 00:36:11,359
files in my public folder

1010
00:36:11,359 --> 00:36:15,680
i could do css and

1011
00:36:15,680 --> 00:36:19,599
create style.css and we'll just do like

1012
00:36:19,599 --> 00:36:22,000
body

1013
00:36:22,240 --> 00:36:26,320
we'll say background sky blue

1014
00:36:26,320 --> 00:36:27,839
so i'll save that let's create a

1015
00:36:27,839 --> 00:36:29,839
javascript in our public folder as well

1016
00:36:29,839 --> 00:36:30,640
we'll say

1017
00:36:30,640 --> 00:36:34,760
folder js and file

1018
00:36:34,760 --> 00:36:38,160
main.js and i'll just do uh

1019
00:36:38,160 --> 00:36:41,280
console log of one two three

1020
00:36:41,280 --> 00:36:43,520
i just wanna include these files in my

1021
00:36:43,520 --> 00:36:46,240
my html so back in my html i'll do a

1022
00:36:46,240 --> 00:36:47,440
link

1023
00:36:47,440 --> 00:36:50,560
to css slash style and then i'll

1024
00:36:50,560 --> 00:36:54,240
link my javascript down here oops

1025
00:36:54,240 --> 00:36:57,680
script source and

1026
00:36:57,680 --> 00:37:00,240
js slash main js all right so i just

1027
00:37:00,240 --> 00:37:02,000
want to show you that if i go to chrome

1028
00:37:02,000 --> 00:37:02,560
now

1029
00:37:02,560 --> 00:37:05,200
and i reload in my network tab i'm going

1030
00:37:05,200 --> 00:37:05,920
to see

1031
00:37:05,920 --> 00:37:07,839
all those files okay they're all getting

1032
00:37:07,839 --> 00:37:10,640
loaded we have our main document here

1033
00:37:10,640 --> 00:37:13,440
which has the content type of text html

1034
00:37:13,440 --> 00:37:15,520
we have our style sheet

1035
00:37:15,520 --> 00:37:17,599
okay text style we have our javascript

1036
00:37:17,599 --> 00:37:19,520
so we can see all that stuff we can also

1037
00:37:19,520 --> 00:37:20,079
see

1038
00:37:20,079 --> 00:37:23,200
the body of each one as well

1039
00:37:23,200 --> 00:37:25,359
okay and it would be the same if you had

1040
00:37:25,359 --> 00:37:27,200
like some kind of shared host and you

1041
00:37:27,200 --> 00:37:29,599
just uploaded your html and css and all

1042
00:37:29,599 --> 00:37:30,880
that you get the same

1043
00:37:30,880 --> 00:37:32,960
type of thing here and of course we can

1044
00:37:32,960 --> 00:37:35,200
narrow the files down

1045
00:37:35,200 --> 00:37:39,440
css javascript and if i had some kind of

1046
00:37:39,440 --> 00:37:42,480
fetch fetch request or ajax request that

1047
00:37:42,480 --> 00:37:43,280
would show

1048
00:37:43,280 --> 00:37:46,400
under xhr okay so

1049
00:37:46,400 --> 00:37:49,520
hopefully this you know this gives you a

1050
00:37:49,520 --> 00:37:50,720
good idea of how

1051
00:37:50,720 --> 00:37:53,920
http works i know that we focused a lot

1052
00:37:53,920 --> 00:37:55,760
on express but again i think it's a good

1053
00:37:55,760 --> 00:37:57,119
example just because

1054
00:37:57,119 --> 00:37:59,359
you have direct access to everything to

1055
00:37:59,359 --> 00:38:00,720
all the headers and

1056
00:38:00,720 --> 00:38:03,760
body on both sides so now keep in mind

1057
00:38:03,760 --> 00:38:04,720
when you deploy

1058
00:38:04,720 --> 00:38:07,040
a node.js and express app you're you're

1059
00:38:07,040 --> 00:38:08,480
not going to serve it like this from

1060
00:38:08,480 --> 00:38:10,160
port 5000 you're going to use something

1061
00:38:10,160 --> 00:38:11,200
like nginx

1062
00:38:11,200 --> 00:38:14,000
use like a reverse proxy and there's a

1063
00:38:14,000 --> 00:38:15,599
whole bunch of configuration that goes

1064
00:38:15,599 --> 00:38:16,160
into it

1065
00:38:16,160 --> 00:38:19,680
but as far as how http works it's

1066
00:38:19,680 --> 00:38:22,320
it's the same way the same uh you send

1067
00:38:22,320 --> 00:38:24,560
data receive data in the same way

1068
00:38:24,560 --> 00:38:26,480
all right so thanks a lot guys thanks

1069
00:38:26,480 --> 00:38:27,839
for watching if you like this please

1070
00:38:27,839 --> 00:38:31,599
leave a like and i'll see you next time

